// Generated by SpatialOS codegen. DO NOT EDIT!
// source: automaton/spawner.schema
#ifndef SPATIALOS_SCHEMA_automaton_spawner_schema_14562323266926666581_INCLUDED
#define SPATIALOS_SCHEMA_automaton_spawner_schema_14562323266926666581_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>
#include <improbable/standard_library.h>

struct Pbio;
struct Pbio_Object;

namespace automaton {

// Forward declarations.
//----------------------------------------------------------------

class SpawnPlayerRequest;
class SpawnPlayerResponse;
class SpawnerData;

namespace detail {
IMPROBABLE_DLL_API const ::worker::detail::ClientComponentVtable& Vtable_Spawner();
struct IMPROBABLE_DLL_API GenericCommandObject_Spawner {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::automaton::SpawnPlayerRequest,
      ::automaton::SpawnPlayerResponse> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API SpawnPlayerRequest {
public:
  // Main constructor.
  SpawnPlayerRequest(const ::improbable::Coordinates& position);
  SpawnPlayerRequest() : _position(0.f, 0.f, 0.f) {}
  // Creates a new instance with default values for each field.
  static SpawnPlayerRequest Create();

  // Copyable and moveable.
  SpawnPlayerRequest(SpawnPlayerRequest&&) = default;
  SpawnPlayerRequest(const SpawnPlayerRequest&) = default;
  SpawnPlayerRequest& operator=(SpawnPlayerRequest&&) = default;
  SpawnPlayerRequest& operator=(const SpawnPlayerRequest&) = default;
  ~SpawnPlayerRequest() = default;

  bool operator==(const SpawnPlayerRequest&) const;
  bool operator!=(const SpawnPlayerRequest&) const;

  // Field position = 1.
  const ::improbable::Coordinates& position() const;
  ::improbable::Coordinates& position();
  SpawnPlayerRequest& set_position(const ::improbable::Coordinates&);

private:
  ::improbable::Coordinates _position;
};

class IMPROBABLE_DLL_API SpawnPlayerResponse {
public:
  // Main constructor.
  SpawnPlayerResponse(
      bool success,
      const std::string& error_message,
      ::worker::EntityId created_entity_id);
  SpawnPlayerResponse() : _success(false), _error_message(), _created_entity_id(0) {}
  // Creates a new instance with default values for each field. 
  static SpawnPlayerResponse Create();

  // Copyable and moveable.
  SpawnPlayerResponse(SpawnPlayerResponse&&) = default;
  SpawnPlayerResponse(const SpawnPlayerResponse&) = default;
  SpawnPlayerResponse& operator=(SpawnPlayerResponse&&) = default;
  SpawnPlayerResponse& operator=(const SpawnPlayerResponse&) = default;
  ~SpawnPlayerResponse() = default;

  bool operator==(const SpawnPlayerResponse&) const;
  bool operator!=(const SpawnPlayerResponse&) const;

  // Field success = 1.
  bool success() const;
  bool& success();
  SpawnPlayerResponse& set_success(bool);

  // Field error_message = 2.
  const std::string& error_message() const;
  std::string& error_message();
  SpawnPlayerResponse& set_error_message(const std::string&);

  // Field created_entity_id = 3.
  ::worker::EntityId created_entity_id() const;
  ::worker::EntityId& created_entity_id();
  SpawnPlayerResponse& set_created_entity_id(::worker::EntityId);

private:
  bool _success;
  std::string _error_message;
  ::worker::EntityId _created_entity_id;
};

class IMPROBABLE_DLL_API SpawnerData {
public:
  // Main constructor.
  SpawnerData();
  // Creates a new instance with default values for each field.
  static SpawnerData Create();

  // Copyable and moveable.
  SpawnerData(SpawnerData&&) = default;
  SpawnerData(const SpawnerData&) = default;
  SpawnerData& operator=(SpawnerData&&) = default;
  SpawnerData& operator=(const SpawnerData&) = default;
  ~SpawnerData() = default;

  bool operator==(const SpawnerData&) const;
  bool operator!=(const SpawnerData&) const;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::automaton::Spawner;
 *
 *   Spawner::Update update;
 *   connection.SendComponentUpdate< Spawner >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Spawner >(
 *       [&](const worker::ComponentUpdateOp< Spawner >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Spawner::Update update = op.GetUpdate();
 *       });
 *
 *   Spawner::Data data = entity.Get< Spawner >();
 */
struct IMPROBABLE_DLL_API Spawner : ::worker::detail::ComponentMetaclassBase<
    Spawner, ::automaton::detail::Vtable_Spawner> {
  static constexpr const ::worker::ComponentId ComponentId = 30004;
  using Data = ::automaton::SpawnerData;
  using GenericCommandObject = ::automaton::detail::GenericCommandObject_Spawner;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::automaton::SpawnerData object. */
    static Update FromInitialData(const ::automaton::SpawnerData& data);

    /**
     * Converts to a ::automaton::SpawnerData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::automaton::SpawnerData ToInitialData() const;

    /**
     * Replaces fields in the given ::automaton::SpawnerData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::automaton::SpawnerData&) const;
  };

  /**
   * Command metaclasses for the Spawner component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class IMPROBABLE_DLL_API Commands {
  public:
    class SpawnPlayer {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = ::automaton::Spawner;
      using Request = ::automaton::SpawnPlayerRequest;
      using Response = ::automaton::SpawnPlayerResponse;
    };
  };
};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_SpawnPlayerRequest(const ::automaton::SpawnPlayerRequest&, ::Pbio_Object*);

::automaton::SpawnPlayerRequest Read_SpawnPlayerRequest(::Pbio_Object*);

void Write_SpawnPlayerResponse(const ::automaton::SpawnPlayerResponse&, ::Pbio_Object*);

::automaton::SpawnPlayerResponse Read_SpawnPlayerResponse(::Pbio_Object*);

void Write_SpawnerData(const ::automaton::SpawnerData&, ::Pbio_Object*);

::automaton::SpawnerData Read_SpawnerData(::Pbio_Object*);

}  // ::detail
}  // ::automaton

#endif  // SPATIALOS_SCHEMA_automaton_spawner_schema_14562323266926666581_INCLUDED
