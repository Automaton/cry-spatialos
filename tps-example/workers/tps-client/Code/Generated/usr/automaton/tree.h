// Generated by SpatialOS codegen. DO NOT EDIT!
// source: automaton/tree.schema
#ifndef SPATIALOS_SCHEMA_automaton_tree_schema_3812636556826804661_INCLUDED
#define SPATIALOS_SCHEMA_automaton_tree_schema_3812636556826804661_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>
#include <automaton/quaternion.h>

struct Pbio;
struct Pbio_Object;

namespace automaton {

// Forward declarations.
//----------------------------------------------------------------

class TreeData;

namespace detail {
IMPROBABLE_DLL_API const ::worker::detail::ClientComponentVtable& Vtable_Tree();
struct IMPROBABLE_DLL_API GenericCommandObject_Tree {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API TreeData {
public:
  // Main constructor.
  TreeData(bool dead);
  // Creates a new instance with default values for each field.
  static TreeData Create();

  // Copyable and moveable.
  TreeData(TreeData&&) = default;
  TreeData(const TreeData&) = default;
  TreeData& operator=(TreeData&&) = default;
  TreeData& operator=(const TreeData&) = default;
  ~TreeData() = default;

  bool operator==(const TreeData&) const;
  bool operator!=(const TreeData&) const;

  // Field dead = 1.
  bool dead() const;
  bool& dead();
  TreeData& set_dead(bool);

private:
  bool _dead;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::automaton::Tree;
 *
 *   Tree::Update update;
 *   connection.SendComponentUpdate< Tree >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Tree >(
 *       [&](const worker::ComponentUpdateOp< Tree >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Tree::Update update = op.GetUpdate();
 *       });
 *
 *   Tree::Data data = entity.Get< Tree >();
 */
struct IMPROBABLE_DLL_API Tree : ::worker::detail::ComponentMetaclassBase<
    Tree, ::automaton::detail::Vtable_Tree> {
  static constexpr const ::worker::ComponentId ComponentId = 30020;
  using Data = ::automaton::TreeData;
  using GenericCommandObject = ::automaton::detail::GenericCommandObject_Tree;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::automaton::TreeData object. */
    static Update FromInitialData(const ::automaton::TreeData& data);

    /**
     * Converts to a ::automaton::TreeData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::automaton::TreeData ToInitialData() const;

    /**
     * Replaces fields in the given ::automaton::TreeData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::automaton::TreeData&) const;

    // Field dead = 1.
    const ::worker::Option< bool >& dead() const;
    ::worker::Option< bool >& dead();
    Update& set_dead(bool);

  private:
    ::worker::Option< bool > _dead;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_TreeData(const ::automaton::TreeData&, ::Pbio_Object*);

::automaton::TreeData Read_TreeData(::Pbio_Object*);

}  // ::detail
}  // ::automaton

#endif  // SPATIALOS_SCHEMA_automaton_tree_schema_3812636556826804661_INCLUDED
