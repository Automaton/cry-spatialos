// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/standard_library.schema
#ifndef SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
#define SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

struct Pbio;
struct Pbio_Object;

namespace improbable {

// Forward declarations.
//----------------------------------------------------------------

class Coordinates;
class WorkerRequirementSet;
class EntityAclData;
class MetadataData;
class PersistenceData;
class PositionData;
class WorkerAttributeSet;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_EntityAcl();
struct GenericCommandObject_EntityAcl {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
const ::worker::detail::ClientComponentVtable& Vtable_Metadata();
struct GenericCommandObject_Metadata {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
const ::worker::detail::ClientComponentVtable& Vtable_Position();
struct GenericCommandObject_Position {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
const ::worker::detail::ClientComponentVtable& Vtable_Persistence();
struct GenericCommandObject_Persistence {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class Coordinates {
public:
  // Main constructor.
  Coordinates(
      double x,
      double y,
      double z);

  // Copyable and moveable.
  Coordinates(Coordinates&&) = default;
  Coordinates(const Coordinates&) = default;
  Coordinates& operator=(Coordinates&&) = default;
  Coordinates& operator=(const Coordinates&) = default;
  ~Coordinates() = default;

  bool operator==(const Coordinates&) const;
  bool operator!=(const Coordinates&) const;

  // Field x = 1.
  double x() const;
  double& x();
  Coordinates& set_x(double);

  // Field y = 2.
  double y() const;
  double& y();
  Coordinates& set_y(double);

  // Field z = 3.
  double z() const;
  double& z();
  Coordinates& set_z(double);

private:
  double _x;
  double _y;
  double _z;
};

class WorkerRequirementSet {
public:
  // Main constructor.
  WorkerRequirementSet(const ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set);

  // Copyable and moveable.
  WorkerRequirementSet(WorkerRequirementSet&&) = default;
  WorkerRequirementSet(const WorkerRequirementSet&) = default;
  WorkerRequirementSet& operator=(WorkerRequirementSet&&) = default;
  WorkerRequirementSet& operator=(const WorkerRequirementSet&) = default;
  ~WorkerRequirementSet() = default;

  bool operator==(const WorkerRequirementSet&) const;
  bool operator!=(const WorkerRequirementSet&) const;

  // Field attribute_set = 1.
  const ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set() const;
  ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set();
  WorkerRequirementSet& set_attribute_set(const ::worker::List< ::improbable::WorkerAttributeSet >&);

private:
  ::worker::List< ::improbable::WorkerAttributeSet > _attribute_set;
};

class EntityAclData {
public:
  // Main constructor.
  EntityAclData(
      const ::improbable::WorkerRequirementSet& read_acl,
      const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& component_write_acl);

  // Copyable and moveable.
  EntityAclData(EntityAclData&&) = default;
  EntityAclData(const EntityAclData&) = default;
  EntityAclData& operator=(EntityAclData&&) = default;
  EntityAclData& operator=(const EntityAclData&) = default;
  ~EntityAclData() = default;

  bool operator==(const EntityAclData&) const;
  bool operator!=(const EntityAclData&) const;

  // Field read_acl = 1.
  const ::improbable::WorkerRequirementSet& read_acl() const;
  ::improbable::WorkerRequirementSet& read_acl();
  EntityAclData& set_read_acl(const ::improbable::WorkerRequirementSet&);

  // Field component_write_acl = 2.
  const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& component_write_acl() const;
  ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& component_write_acl();
  EntityAclData& set_component_write_acl(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >&);

private:
  ::improbable::WorkerRequirementSet _read_acl;
  ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > _component_write_acl;
};

class MetadataData {
public:
  // Main constructor.
  MetadataData(const std::string& entity_type);

  // Copyable and moveable.
  MetadataData(MetadataData&&) = default;
  MetadataData(const MetadataData&) = default;
  MetadataData& operator=(MetadataData&&) = default;
  MetadataData& operator=(const MetadataData&) = default;
  ~MetadataData() = default;

  bool operator==(const MetadataData&) const;
  bool operator!=(const MetadataData&) const;

  // Field entity_type = 1.
  const std::string& entity_type() const;
  std::string& entity_type();
  MetadataData& set_entity_type(const std::string&);

private:
  std::string _entity_type;
};

class PersistenceData {
public:
  // Main constructor.
  PersistenceData();

  // Copyable and moveable.
  PersistenceData(PersistenceData&&) = default;
  PersistenceData(const PersistenceData&) = default;
  PersistenceData& operator=(PersistenceData&&) = default;
  PersistenceData& operator=(const PersistenceData&) = default;
  ~PersistenceData() = default;

  bool operator==(const PersistenceData&) const;
  bool operator!=(const PersistenceData&) const;
};

class PositionData {
public:
  // Main constructor.
  PositionData(const ::improbable::Coordinates& coords);

  // Copyable and moveable.
  PositionData(PositionData&&) = default;
  PositionData(const PositionData&) = default;
  PositionData& operator=(PositionData&&) = default;
  PositionData& operator=(const PositionData&) = default;
  ~PositionData() = default;

  bool operator==(const PositionData&) const;
  bool operator!=(const PositionData&) const;

  // Field coords = 1.
  const ::improbable::Coordinates& coords() const;
  ::improbable::Coordinates& coords();
  PositionData& set_coords(const ::improbable::Coordinates&);

private:
  ::improbable::Coordinates _coords;
};

class WorkerAttributeSet {
public:
  // Main constructor.
  WorkerAttributeSet(const ::worker::List< std::string >& attribute);

  // Copyable and moveable.
  WorkerAttributeSet(WorkerAttributeSet&&) = default;
  WorkerAttributeSet(const WorkerAttributeSet&) = default;
  WorkerAttributeSet& operator=(WorkerAttributeSet&&) = default;
  WorkerAttributeSet& operator=(const WorkerAttributeSet&) = default;
  ~WorkerAttributeSet() = default;

  bool operator==(const WorkerAttributeSet&) const;
  bool operator!=(const WorkerAttributeSet&) const;

  // Field attribute = 1.
  const ::worker::List< std::string >& attribute() const;
  ::worker::List< std::string >& attribute();
  WorkerAttributeSet& set_attribute(const ::worker::List< std::string >&);

private:
  ::worker::List< std::string > _attribute;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::EntityAcl;
 *
 *   EntityAcl::Update update;
 *   connection.SendComponentUpdate< EntityAcl >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< EntityAcl >(
 *       [&](const worker::ComponentUpdateOp< EntityAcl >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         EntityAcl::Update update = op.GetUpdate();
 *       });
 *
 *   EntityAcl::Data data = entity.Get< EntityAcl >();
 */
struct EntityAcl : ::worker::detail::ComponentMetaclassBase<
    EntityAcl, ::improbable::detail::Vtable_EntityAcl> {
  static constexpr const ::worker::ComponentId ComponentId = 50;
  using Data = ::improbable::EntityAclData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_EntityAcl;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::EntityAclData object. */
    static Update FromInitialData(const ::improbable::EntityAclData& data);

    /**
     * Converts to a ::improbable::EntityAclData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::EntityAclData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::EntityAclData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::EntityAclData&) const;

    // Field read_acl = 1.
    const ::worker::Option< ::improbable::WorkerRequirementSet >& read_acl() const;
    ::worker::Option< ::improbable::WorkerRequirementSet >& read_acl();
    Update& set_read_acl(const ::improbable::WorkerRequirementSet&);

    // Field component_write_acl = 2.
    const ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > >& component_write_acl() const;
    ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > >& component_write_acl();
    Update& set_component_write_acl(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >&);

  private:
    ::worker::Option< ::improbable::WorkerRequirementSet > _read_acl;
    ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > > _component_write_acl;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::Metadata;
 *
 *   Metadata::Update update;
 *   connection.SendComponentUpdate< Metadata >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Metadata >(
 *       [&](const worker::ComponentUpdateOp< Metadata >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Metadata::Update update = op.GetUpdate();
 *       });
 *
 *   Metadata::Data data = entity.Get< Metadata >();
 */
struct Metadata : ::worker::detail::ComponentMetaclassBase<
    Metadata, ::improbable::detail::Vtable_Metadata> {
  static constexpr const ::worker::ComponentId ComponentId = 53;
  using Data = ::improbable::MetadataData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_Metadata;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::MetadataData object. */
    static Update FromInitialData(const ::improbable::MetadataData& data);

    /**
     * Converts to a ::improbable::MetadataData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::MetadataData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::MetadataData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::MetadataData&) const;

    // Field entity_type = 1.
    const ::worker::Option< std::string >& entity_type() const;
    ::worker::Option< std::string >& entity_type();
    Update& set_entity_type(const std::string&);

  private:
    ::worker::Option< std::string > _entity_type;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::Position;
 *
 *   Position::Update update;
 *   connection.SendComponentUpdate< Position >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Position >(
 *       [&](const worker::ComponentUpdateOp< Position >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Position::Update update = op.GetUpdate();
 *       });
 *
 *   Position::Data data = entity.Get< Position >();
 */
struct Position : ::worker::detail::ComponentMetaclassBase<
    Position, ::improbable::detail::Vtable_Position> {
  static constexpr const ::worker::ComponentId ComponentId = 54;
  using Data = ::improbable::PositionData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_Position;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::PositionData object. */
    static Update FromInitialData(const ::improbable::PositionData& data);

    /**
     * Converts to a ::improbable::PositionData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::PositionData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::PositionData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::PositionData&) const;

    // Field coords = 1.
    const ::worker::Option< ::improbable::Coordinates >& coords() const;
    ::worker::Option< ::improbable::Coordinates >& coords();
    Update& set_coords(const ::improbable::Coordinates&);

  private:
    ::worker::Option< ::improbable::Coordinates > _coords;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::Persistence;
 *
 *   Persistence::Update update;
 *   connection.SendComponentUpdate< Persistence >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Persistence >(
 *       [&](const worker::ComponentUpdateOp< Persistence >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Persistence::Update update = op.GetUpdate();
 *       });
 *
 *   Persistence::Data data = entity.Get< Persistence >();
 */
struct Persistence : ::worker::detail::ComponentMetaclassBase<
    Persistence, ::improbable::detail::Vtable_Persistence> {
  static constexpr const ::worker::ComponentId ComponentId = 55;
  using Data = ::improbable::PersistenceData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_Persistence;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::PersistenceData object. */
    static Update FromInitialData(const ::improbable::PersistenceData& data);

    /**
     * Converts to a ::improbable::PersistenceData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::PersistenceData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::PersistenceData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::PersistenceData&) const;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_Coordinates(const ::improbable::Coordinates&, ::Pbio_Object*);

::improbable::Coordinates Read_Coordinates(::Pbio_Object*);

void Write_WorkerRequirementSet(const ::improbable::WorkerRequirementSet&, ::Pbio_Object*);

::improbable::WorkerRequirementSet Read_WorkerRequirementSet(::Pbio_Object*);

void Write_EntityAclData(const ::improbable::EntityAclData&, ::Pbio_Object*);

::improbable::EntityAclData Read_EntityAclData(::Pbio_Object*);

void Write_MetadataData(const ::improbable::MetadataData&, ::Pbio_Object*);

::improbable::MetadataData Read_MetadataData(::Pbio_Object*);

void Write_PersistenceData(const ::improbable::PersistenceData&, ::Pbio_Object*);

::improbable::PersistenceData Read_PersistenceData(::Pbio_Object*);

void Write_PositionData(const ::improbable::PositionData&, ::Pbio_Object*);

::improbable::PositionData Read_PositionData(::Pbio_Object*);

void Write_WorkerAttributeSet(const ::improbable::WorkerAttributeSet&, ::Pbio_Object*);

::improbable::WorkerAttributeSet Read_WorkerAttributeSet(::Pbio_Object*);

}  // ::detail
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
