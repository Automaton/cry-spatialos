// Generated by SpatialOS codegen. DO NOT EDIT!
// source: automaton/player/movement.schema
#ifndef SPATIALOS_SCHEMA_automaton_player_movement_schema_115752896232219420_INCLUDED
#define SPATIALOS_SCHEMA_automaton_player_movement_schema_115752896232219420_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>
#include <automaton/quaternion.h>

struct Pbio;
struct Pbio_Object;

namespace automaton {
namespace player {

// Forward declarations.
//----------------------------------------------------------------

class MovementData;

namespace detail {
IMPROBABLE_DLL_API const ::worker::detail::ClientComponentVtable& Vtable_Movement();
struct IMPROBABLE_DLL_API GenericCommandObject_Movement {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API MovementData {
public:
  // Main constructor.
  MovementData(
      bool moving,
      const ::automaton::Quaternion& orientation,
      bool running);
  // Creates a new instance with default values for each field.
  static MovementData Create();

  // Copyable and moveable.
  MovementData(MovementData&&) = default;
  MovementData(const MovementData&) = default;
  MovementData& operator=(MovementData&&) = default;
  MovementData& operator=(const MovementData&) = default;
  ~MovementData() = default;

  bool operator==(const MovementData&) const;
  bool operator!=(const MovementData&) const;

  // Field moving = 1.
  bool moving() const;
  bool& moving();
  MovementData& set_moving(bool);

  // Field orientation = 2.
  const ::automaton::Quaternion& orientation() const;
  ::automaton::Quaternion& orientation();
  MovementData& set_orientation(const ::automaton::Quaternion&);

  // Field running = 3.
  bool running() const;
  bool& running();
  MovementData& set_running(bool);

private:
  bool _moving;
  ::automaton::Quaternion _orientation;
  bool _running;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::automaton::player::Movement;
 *
 *   Movement::Update update;
 *   connection.SendComponentUpdate< Movement >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Movement >(
 *       [&](const worker::ComponentUpdateOp< Movement >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Movement::Update update = op.GetUpdate();
 *       });
 *
 *   Movement::Data data = entity.Get< Movement >();
 */
struct IMPROBABLE_DLL_API Movement : ::worker::detail::ComponentMetaclassBase<
    Movement, ::automaton::player::detail::Vtable_Movement> {
  static constexpr const ::worker::ComponentId ComponentId = 30001;
  using Data = ::automaton::player::MovementData;
  using GenericCommandObject = ::automaton::player::detail::GenericCommandObject_Movement;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::automaton::player::MovementData object. */
    static Update FromInitialData(const ::automaton::player::MovementData& data);

    /**
     * Converts to a ::automaton::player::MovementData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::automaton::player::MovementData ToInitialData() const;

    /**
     * Replaces fields in the given ::automaton::player::MovementData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::automaton::player::MovementData&) const;

    // Field moving = 1.
    const ::worker::Option< bool >& moving() const;
    ::worker::Option< bool >& moving();
    Update& set_moving(bool);

    // Field orientation = 2.
    const ::worker::Option< ::automaton::Quaternion >& orientation() const;
    ::worker::Option< ::automaton::Quaternion >& orientation();
    Update& set_orientation(const ::automaton::Quaternion&);

    // Field running = 3.
    const ::worker::Option< bool >& running() const;
    ::worker::Option< bool >& running();
    Update& set_running(bool);

  private:
    ::worker::Option< bool > _moving;
    ::worker::Option< ::automaton::Quaternion > _orientation;
    ::worker::Option< bool > _running;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_MovementData(const ::automaton::player::MovementData&, ::Pbio_Object*);

::automaton::player::MovementData Read_MovementData(::Pbio_Object*);

}  // ::detail
}  // ::player
}  // ::automaton

#endif  // SPATIALOS_SCHEMA_automaton_player_movement_schema_115752896232219420_INCLUDED
