// Generated by SpatialOS codegen. DO NOT EDIT!
// source: automaton/quaternion.schema
#include <automaton/quaternion.h>
#include <improbable/protobuf_interop.h>

namespace automaton {

// Implementation of Quaternion.
//----------------------------------------------------------------

Quaternion::Quaternion(
    float w,
    float x,
    float y,
    float z)
: _w{w}
, _x{x}
, _y{y}
, _z{z} {}

Quaternion Quaternion::Create() {
  return {
      0,
      0,
      0,
      0};
}

bool Quaternion::operator==(const Quaternion& value) const {
  return
      _w == value._w &&
      _x == value._x &&
      _y == value._y &&
      _z == value._z;
}

bool Quaternion::operator!=(const Quaternion& value) const {
  return !operator==(value);
}

float Quaternion::w() const {
  return _w;
}

float& Quaternion::w() {
  return _w;
}

Quaternion& Quaternion::set_w(float value) {
  _w = value;
  return *this;
}

float Quaternion::x() const {
  return _x;
}

float& Quaternion::x() {
  return _x;
}

Quaternion& Quaternion::set_x(float value) {
  _x = value;
  return *this;
}

float Quaternion::y() const {
  return _y;
}

float& Quaternion::y() {
  return _y;
}

Quaternion& Quaternion::set_y(float value) {
  _y = value;
  return *this;
}

float Quaternion::z() const {
  return _z;
}

float& Quaternion::z() {
  return _z;
}

Quaternion& Quaternion::set_z(float value) {
  _z = value;
  return *this;
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Write_Quaternion(
    const ::automaton::Quaternion& data, ::Pbio_Object* object) {
  ::Pbio_AddFloat(object, 1, data.w());
  ::Pbio_AddFloat(object, 2, data.x());
  ::Pbio_AddFloat(object, 3, data.y());
  ::Pbio_AddFloat(object, 4, data.z());
}

::automaton::Quaternion Read_Quaternion(::Pbio_Object* object) {
  auto _w = ::Pbio_GetFloat(object, 1);
  auto _x = ::Pbio_GetFloat(object, 2);
  auto _y = ::Pbio_GetFloat(object, 3);
  auto _z = ::Pbio_GetFloat(object, 4);
  return {
      std::move(_w),
      std::move(_x),
      std::move(_y),
      std::move(_z)};
}

}  // ::detail

}  // ::automaton
